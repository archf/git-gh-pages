#!/bin/sh

# inspired from
# http://pressedpixels.com/articles/deploying-to-github-pages-with-git-worktree/
# http://blog.jenkster.com/2016/02/git-for-static-sites.html

# this will set set GIT_DIR and GIT_OBJECT_DIRECTORY shell variables, but does
# not export them to the environment.
. "$(git --exec-path)/git-sh-setup"

VERSION=0.1.1
GITREPO="$(git rev-parse --show-toplevel)"

if [ $# -eq 0 ]; then
    set -- -h
fi

OPTS_SPEC="\
git gh-pages <command> <options> <arguments>

Commands:
  init      Create orphan gh-pages branch with empty commit
  update    Rebuild documentation locally using an external build tool
  push      Push local gh-pages changes upstream

  help      gh-pages documentation for git-gh-pages
  version   Display git-gh-pages version

See 'git help gh-pages' for complete doumentation and usage of each command.

Options:
--
h           Show the command summary
help        Help overview
version     Print the git-gh-pages version number

q,quiet     Show minimal output
v,verbose   Show verbose output

 options for 'update'
b,builder=  Build tool generates your gh-pages documation (default:=sphinx)
o,opts=     Arguments literally passed to the builder tool
"

# see how we are called
eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@" || echo exit $?)"

require_work_tree_exists

debug()
{
	if [ -n "$debug" ]; then
		printf "%s\n" "$*" >&2
	fi
}

version()
{
	if [ -n "$version" ]; then
		printf "%s\n" "$*"
    exit 0
  fi
}

command=
message=
builder=sphinx
opts=

# echo "arglist: $*"

# arglist will be something like: -b sphinx -- push

# parse command options
while [ $# -gt 0 ]; do
	opt="$1"
	shift
	case "$opt" in
		-q) quiet=1 ;;
		-v) debug=1 ;;
    -d) debug=1 ;;
		--version) version=1 ;;
		-h|--help) help=1 ;;
		-b|--builder) builder="$1"; shift ;;
		-o|--opts) buildopts="$1"; shift ;;
		-b|--branch) branch="$1"; shift ;;
		-m) message="$1"; shift ;;
		--message) message="$1"; shift ;;
		--) break ;;
		*) die "Unexpected option: $opt" ;;
	esac
done

version $(basename $0) $VERSION

debug "Subcommand: $*"
debug

# parse the subcommand
command="$1"
shift

case "$command" in
	init|update|push) ;;
	*) die "Unknown command '$command'" ;;
esac

# debug
debug "GIR_DIR: $GIT_DIR"
debug "GIT_OBJECT_DIRECTORY: $GIT_OBJECT_DIRECTORY"
debug "GIRREPO: $GITREPO"
debug "command: $command"
debug

rev_exists()
{
	if git rev-parse "$1" >/dev/null 2>&1; then
		return 0
	else
		return 1
	fi
}

worktree_exists()
{
  local worktree=$1
  local found=

  debug "looking if worktree '$worktree' exists..."
  # this should spit a list of unquoted strings
  for i in $(git worktree list --porcelain)
  do
    if [ $i = ${GITREPO}/${worktree} ]
    then
      debug "found: $i"
      return 0
    fi
  done
  return 1
}

# initialyse worktree
_init()
{
  if ! rev_exists "gh-pages"; then
    # create a new gh-pages branch if it doesn't yet exist
    git checkout -q --orphan gh-pages

    # the new branch
    # don't do a 'git rm -rf .' as it will affect stuff in master branch
    git reset

    git commit  --allow-empty -m 'Initial empty commit'
    # unfortunatly this checkouts the branch wich is not what we want. we have
    # to switch back to master
    git checkout -q -f master
  fi

  # prepare an empty dir by the branch name
  # mkdir -p ${GITREPO}/gh-pages

  # master branch history will all be shared in the gh-pages branch
  # # checkout gh-pages branch in gh-pages directory
  # $1=path
  # $2=branch
  # returns 255 if branch already exists checkout the branch in the directory
  if ! worktree_exists "gh-pages"
  then
    git worktree add gh-pages gh-pages
  fi

  # make sure gh-pages is in .gitignore for master branch not to track it
  if [ -e "${GITREPO}/.gitignore" ]; then
    if grep -q -o "gh-pages" "${GITREPO}/.gitignore"
    then
      debug "found gh-pages entry in .gitignore"
      return 0
    else
      debug "gh-pages entry not found in .gitignore"
      found=1
    fi
  fi

  if [ -n $found ]
  then
    debug "adding gh-pages entry in .gitignore"
    echo "gh-pages" >> ${GITREPO}/.gitignore
  fi
}

_push()
{
  git push -u origin gh-pages
}

sphinxbuild()
{
  local SPHINXBUILD="sphinx-build"
  local SPHINXSOURCEDIR="$GITREPO/docs"
  local BUILDDIR="$GITREPO/gh-pages"

  # Usage: sphinx-build [options] sourcedir outdir
  # -b BUILDER        builder to use; default is html
  # -d PATH           path for the cached environment and doctree files
  $SPHINXBUILD -b html -d $SPHINXSOURCEDIR/doctrees $SPHINXSOURCEDIR $BUILDDIR
  echio
  echo "Sphinx build finished. The HTML pages are in $BUILDDIR."
}

_update()
{
  # build
  debug "builder: $builder"

  # todo: implement -b and -o features

  case $builder in
    sphinx) sphinxbuild ;;
    *) die "Unexpected builder: $builder";;
  esac

  # commit
  cd $GITREPO/gh-pages
  git add --all
  git commit --template=/dev/null --allow-empty-message -m ''
  cd -
}

"_$command" "$@"
